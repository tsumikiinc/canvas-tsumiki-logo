
/*!
Canvas Tsumiki logo
(c) Tsumiki inc.
 */

(function() {
  var TsumikiLogo;

  TsumikiLogo = (function() {
    var _extend, _setSize;

    _extend = function(out) {
      var i, key, val, _i, _ref, _ref1;
      out = out || {};
      for (i = _i = 1, _ref = arguments.length; 1 <= _ref ? _i < _ref : _i > _ref; i = 1 <= _ref ? ++_i : --_i) {
        if (!arguments[i]) {
          continue;
        }
        _ref1 = arguments[i];
        for (key in _ref1) {
          val = _ref1[key];
          if (arguments[i].hasOwnProperty(key)) {
            out[key] = val;
          }
        }
      }
      return out;
    };

    TsumikiLogo.defaults = {
      size: 256,
      fillColor: ['#23AAA4', '#5AB5B0', '#78BEB2', '#686F89', '#DC5D54', '#DD6664', '#D94142', '#E78E21', '#E9A21F', '#EDB51C'],
      fill: true,
      lineWidth: 0,
      lineColor: '#333',
      ratio: 1,
      pieceLength: 8
    };

    _setSize = function(size) {
      if (size != null) {
        if (this.options.ratio === 1) {
          this.canvas.width = size;
          return this.canvas.height = size;
        } else {
          this.canvas.width = size * this.options.ratio;
          this.canvas.height = size * this.options.ratio;
          this.canvas.style.width = "" + this.options.size + "px";
          return this.canvas.style.height = "" + this.options.size + "px";
        }
      }
    };

    function TsumikiLogo(canvas, options) {
      this.canvas = canvas;
      this.context = this.canvas.getContext('2d');
      this.options = _extend({}, TsumikiLogo.defaults, options);
      _setSize.call(this, this.options.size);
    }

    TsumikiLogo.prototype.setSize = function(size) {
      this.options.size = size;
      _setSize.call(this, size);
      return this;
    };

    TsumikiLogo.prototype.update = function() {
      if (this.options.ratio === 1) {
        this.pieceSize = this.options.size / this.options.pieceLength;
      } else {
        this.pieceSize = this.options.size / (this.options.pieceLength / this.options.ratio);
      }
      this.context.scale(2, 1);
      this.context.translate(this.pieceSize * 1.25, this.pieceSize / 2);
      this.context.moveTo(this.pieceSize, this.pieceSize);
      this.context.rotate(Math.PI / 4);
      (function(_this) {
        return (function() {
          var fill, i, _drawLoop, _i, _len, _ref, _results;
          i = 0;
          _drawLoop = [[_this.pieceSize, 0], [_this.pieceSize, 0], [-_this.pieceSize, _this.pieceSize]];
          _ref = _this.options.fillColor;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            fill = _ref[_i];
            _this.context.translate(_drawLoop[i][0], _drawLoop[i][1]);
            if (_this.options.fill) {
              _this.context.fillStyle = fill;
              _this.context.fillRect(0, 0, _this.pieceSize, _this.pieceSize);
            }
            if (_this.options.lineWidth > 0) {
              _this.context.lineWidth = _this.options.lineWidth;
              _this.context.strokeStyle = _this.options.lineColor;
              _this.context.strokeRect(0, 0, _this.pieceSize, _this.pieceSize);
            }
            if (i === 2) {
              _results.push(i = 0);
            } else {
              _results.push(i++);
            }
          }
          return _results;
        });
      })(this)();
      return this;
    };

    return TsumikiLogo;

  })();

  window.TsumikiLogo || (window.TsumikiLogo = TsumikiLogo);

}).call(this);

//# sourceMappingURL=data:application/json;base64,